# oracle-backend/app_ui.py
import streamlit as st
import requests # –î–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–∞—à–µ–º—É FastAPI –±—ç–∫–µ–Ω–¥—É
import time
import pandas as pd # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
import os


st.set_page_config(page_title="Oracle Dashboard", layout="wide")

# URL –Ω–∞—à–µ–≥–æ FastAPI –±—ç–∫–µ–Ω–¥–∞
BACKEND_URL = os.getenv("BACKEND_SERVICE_URL", "http://127.0.0.1:8000")
st.sidebar.markdown(f"Backend: {BACKEND_URL}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

# st.set_page_config(page_title="Oracle Dashboard", layout="wide")

st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –û—Ä–∞–∫—É–ª–æ–º –¶–µ–Ω")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±—ç–∫–µ–Ω–¥–∞ ---
def get_data_from_backend(endpoint: str):
    try:
        response = requests.get(f"{BACKEND_URL}{endpoint}", timeout=5)
        response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 2xx
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±—ç–∫–µ–Ω–¥—É ({endpoint}): {e}")
        return None
    except json.JSONDecodeError:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç {endpoint}")
        return None

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ---
st.header("üìà –û–±—â–∏–π –°—Ç–∞—Ç—É—Å –û—Ä–∞–∫—É–ª–∞")
status_data = get_data_from_backend("/status")

if status_data:
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:")
        for pair in status_data.get("tracked_pairs", []):
            st.markdown(f"- `{pair}`")
        st.metric("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ Binance", f"{status_data.get('binance_polling_interval_seconds', 'N/A')} —Å–µ–∫")

    with col2:
        st.subheader("–°—Ç–∞—Ç—É—Å Event Listener'–∞:")
        listener_status = status_data.get("event_listener", {})
        st.metric("–ê–∫—Ç–∏–≤–µ–Ω", "‚úÖ –î–∞" if listener_status.get("active") else "‚ùå –ù–µ—Ç")
        st.metric("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Web3", "‚úÖ –î–∞" if listener_status.get("web3_connected") else "‚ùå –ù–µ—Ç")
        st.markdown(f"**Chain ID:** `{listener_status.get('chain_id', 'N/A')}`")
        st.markdown(f"**–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –û—Ä–∞–∫—É–ª–∞:** `{listener_status.get('contract_address', 'N/A')}`")
        st.markdown(f"**–ê–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –û—Ä–∞–∫—É–ª–∞:** `{listener_status.get('signer_address', 'N/A')}`")
else:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–∞–∫—É–ª–∞.")

st.divider()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω ---
st.header("üíπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã (—Å Binance)")
if status_data and "latest_prices" in status_data:
    prices_to_display = []
    for pair, data in status_data["latest_prices"].items():
        if data:
            prices_to_display.append({
                "–ü–∞—Ä–∞": pair,
                "–¶–µ–Ω–∞": data.get("price", "N/A"),
                "Timestamp": pd.to_datetime(data.get("timestamp", 0), unit='s').strftime('%Y-%m-%d %H:%M:%S') if data.get("timestamp") else "N/A"
            })
        else:
            prices_to_display.append({"–ü–∞—Ä–∞": pair, "–¶–µ–Ω–∞": "N/A", "Timestamp": "N/A"})

    if prices_to_display:
        df_prices = pd.DataFrame(prices_to_display)
        st.dataframe(df_prices, use_container_width=True, hide_index=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
else:
    st.info("–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

st.divider()

# --- –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã ---
st.header("‚úçÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é –¶–µ–Ω—É (–û—Ñ—Ñ—á–µ–π–Ω)")

if status_data and "tracked_pairs" in status_data:
    selected_pair_for_signature = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã:",
        options=status_data["tracked_pairs"],
        key="select_signed_price"
    )

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ü–µ–Ω—É", key="btn_get_signed_price"):
        if selected_pair_for_signature:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä—É –¥–ª—è URL (BTC/USDT -> BTC-USDT)
            api_pair = selected_pair_for_signature.replace('/', '-')
            signed_price_data = get_data_from_backend(f"/signed_price/{api_pair}")
            if signed_price_data:
                st.subheader(f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {signed_price_data.get('assetPair')}:")
                st.json(signed_price_data) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Å—å JSON
                # –ú–æ–∂–Ω–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ:
                # st.markdown(f"**–¶–µ–Ω–∞:** `{signed_price_data.get('price')}`")
                # st.markdown(f"**Timestamp:** `{pd.to_datetime(signed_price_data.get('timestamp'), unit='s').strftime('%Y-%m-%d %H:%M:%S')}`")
                # st.markdown(f"**Asset ID (hex):** `{signed_price_data.get('assetId')}`")
                # st.markdown(f"**–ü–æ–¥–ø–∏—Å—å (hex):**")
                # st.code(signed_price_data.get('signature', ''), language=None)
            else:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {selected_pair_for_signature}.")
else:
    st.info("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ü–µ–Ω—É.")


# --- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
# st.write("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥.")
# time.sleep(15) # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
# st.experimental_rerun()

# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å "–∂–∏–≤—ã–µ" –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", on_click=st.rerun)

st.caption("–ü—Ä–æ—Å—Ç–æ–π UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –û—Ä–∞–∫—É–ª–∞")